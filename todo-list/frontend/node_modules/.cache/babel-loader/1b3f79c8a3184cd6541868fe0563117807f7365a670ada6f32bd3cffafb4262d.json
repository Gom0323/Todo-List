{"ast":null,"code":"var _jsxFileName = \"/Users/leeseungjun/Desktop/Todo-List/todo-list/frontend/src/components/CustomCalendar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { startOfMonth, endOfMonth, startOfWeek, addDays, format, isSameDay } from \"date-fns\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction generateCalendar(year, month) {\n  const firstDayOfMonth = startOfMonth(new Date(year, month));\n  const lastDayOfMonth = endOfMonth(firstDayOfMonth);\n  const firstDayOfWeek = startOfWeek(firstDayOfMonth);\n  const daysInCalendar = [];\n  let currentDay = firstDayOfWeek;\n  while (currentDay <= lastDayOfMonth || daysInCalendar.length < 6) {\n    const week = [];\n    for (let i = 0; i < 7; i++) {\n      week.push(currentDay);\n      currentDay = addDays(currentDay, 1);\n    }\n    daysInCalendar.push(week);\n  }\n  return daysInCalendar;\n}\nfunction CustomCalendar({\n  todos = [],\n  onDateSelect\n}) {\n  _s();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const today = new Date();\n  const year = currentDate.getFullYear();\n  const month = currentDate.getMonth();\n  const daysInCalendar = generateCalendar(year, month);\n  const handlePrevMonth = () => {\n    setCurrentDate(new Date(year, month - 1, 1));\n  };\n  const handleNextMonth = () => {\n    setCurrentDate(new Date(year, month + 1, 1));\n  };\n  const handleDateClick = date => {\n    onDateSelect(date);\n  };\n\n  // 할 일을 모두 마친 날짜인지 확인\n  const isAllTodosCompleted = date => {\n    const formattedDate = format(date, 'yyyy-MM-dd');\n    const todosForDate = todos.filter(todo => {\n      const todoDate = format(new Date(todo.created_at), 'yyyy-MM-dd');\n      return todoDate === formattedDate;\n    });\n    return todosForDate.length > 0 && todosForDate.every(todo => todo.completed);\n  };\n\n  // 특정 날짜에 할 일이 있는지 확인\n  const hasTodos = date => {\n    const formattedDate = format(date, 'yyyy-MM-dd');\n    return todos.some(todo => {\n      const todoDate = format(new Date(todo.created_at), 'yyyy-MM-dd');\n      return todoDate === formattedDate;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"month\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePrevMonth,\n        children: \"\\uC774\\uC804\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: format(currentDate, \"yyyy년 M월\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextMonth,\n        children: \"\\uB2E4\\uC74C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"day\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          paddingTop: \"30px\"\n        },\n        children: [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"].map((dayName, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            flex: 0.1,\n            textAlign: \"center\",\n            padding: \"10px\",\n            color: dayName === \"일\" ? \"red\" : dayName === \"토\" ? \"blue\" : \"black\"\n          },\n          children: dayName\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), daysInCalendar.map((week, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\"\n        },\n        children: week.map((day, j) => {\n          const isCurrentMonth = format(day, \"M\") === format(currentDate, \"M\");\n          const isToday = isSameDay(day, today);\n          const allTodosCompleted = isAllTodosCompleted(day); // 모든 할 일이 완료된 날\n          const todosExist = hasTodos(day); // 할 일이 존재하는 날\n\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              flex: 0.1,\n              textAlign: \"center\",\n              padding: \"10px\",\n              cursor: \"pointer\",\n              backgroundColor: allTodosCompleted ? '#39d353' : isToday ? 'pink' : '',\n              // 할 일을 모두 마친 날짜의 배경색과 오늘 날짜의 배경색 설정\n              border: todosExist ? '0.5px solid #000' : 'none',\n              // 할 일이 있는 날짜에만 테두리 추가\n              color: isCurrentMonth ? \"black\" : \"#ddd\" // 현재 월에 속하지 않는 날짜는 회색으로 표시\n            },\n            onClick: () => handleDateClick(day),\n            children: [format(day, \"d\"), \"  \"]\n          }, j, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 17\n          }, this);\n        })\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(CustomCalendar, \"jlRD8Xn8VFdQnzpYmYXrLX8M9Sw=\");\n_c = CustomCalendar;\nexport default CustomCalendar;\nvar _c;\n$RefreshReg$(_c, \"CustomCalendar\");","map":{"version":3,"names":["React","useState","startOfMonth","endOfMonth","startOfWeek","addDays","format","isSameDay","jsxDEV","_jsxDEV","generateCalendar","year","month","firstDayOfMonth","Date","lastDayOfMonth","firstDayOfWeek","daysInCalendar","currentDay","length","week","i","push","CustomCalendar","todos","onDateSelect","_s","currentDate","setCurrentDate","today","getFullYear","getMonth","handlePrevMonth","handleNextMonth","handleDateClick","date","isAllTodosCompleted","formattedDate","todosForDate","filter","todo","todoDate","created_at","every","completed","hasTodos","some","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","display","justifyContent","paddingTop","map","dayName","index","flex","textAlign","padding","color","day","j","isCurrentMonth","isToday","allTodosCompleted","todosExist","cursor","backgroundColor","border","_c","$RefreshReg$"],"sources":["/Users/leeseungjun/Desktop/Todo-List/todo-list/frontend/src/components/CustomCalendar.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport {\n  startOfMonth,\n  endOfMonth,\n  startOfWeek,\n  addDays,\n  format,\n  isSameDay,\n} from \"date-fns\";\n\nfunction generateCalendar(year, month) {\n  const firstDayOfMonth = startOfMonth(new Date(year, month));\n  const lastDayOfMonth = endOfMonth(firstDayOfMonth);\n  const firstDayOfWeek = startOfWeek(firstDayOfMonth);\n\n  const daysInCalendar = [];\n  let currentDay = firstDayOfWeek;\n\n  while (currentDay <= lastDayOfMonth || daysInCalendar.length < 6) {\n    const week = [];\n    for (let i = 0; i < 7; i++) {\n      week.push(currentDay);\n      currentDay = addDays(currentDay, 1);\n    }\n    daysInCalendar.push(week);\n  }\n\n  return daysInCalendar;\n}\n\nfunction CustomCalendar({ todos = [], onDateSelect }) {\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const today = new Date();\n\n  const year = currentDate.getFullYear();\n  const month = currentDate.getMonth();\n\n  const daysInCalendar = generateCalendar(year, month);\n\n  const handlePrevMonth = () => {\n    setCurrentDate(new Date(year, month - 1, 1));\n  };\n\n  const handleNextMonth = () => {\n    setCurrentDate(new Date(year, month + 1, 1));\n  };\n\n  const handleDateClick = (date) => {\n    onDateSelect(date);\n  };\n\n  // 할 일을 모두 마친 날짜인지 확인\n  const isAllTodosCompleted = (date) => {\n    const formattedDate = format(date, 'yyyy-MM-dd');\n    const todosForDate = todos.filter(todo => {\n      const todoDate = format(new Date(todo.created_at), 'yyyy-MM-dd');\n      return todoDate === formattedDate;\n    });\n\n    return todosForDate.length > 0 && todosForDate.every(todo => todo.completed);\n  };\n\n  // 특정 날짜에 할 일이 있는지 확인\n  const hasTodos = (date) => {\n    const formattedDate = format(date, 'yyyy-MM-dd');\n    return todos.some(todo => {\n      const todoDate = format(new Date(todo.created_at), 'yyyy-MM-dd');\n      return todoDate === formattedDate;\n    });\n  };\n\n  return (\n    <div className=\"calendar\">\n      <div className=\"month\">\n        <button onClick={handlePrevMonth}>이전</button>\n        <span>{format(currentDate, \"yyyy년 M월\")}</span>\n        <button onClick={handleNextMonth}>다음</button>\n      </div>\n      <div className=\"day\">\n        <div style={{ display: \"flex\", justifyContent: \"center\", paddingTop: \"30px\" }}>\n          {[\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"].map((dayName, index) => (\n            <div\n              key={index}\n              style={{\n                flex: 0.1,\n                textAlign: \"center\",\n                padding: \"10px\",\n                color: dayName === \"일\" ? \"red\" : dayName === \"토\" ? \"blue\" : \"black\",\n              }}\n            >\n              {dayName}\n            </div>\n          ))}\n        </div>\n        {daysInCalendar.map((week, i) => (\n          <div key={i} style={{ display: \"flex\", justifyContent: \"center\" }}>\n            {week.map((day, j) => {\n              const isCurrentMonth = format(day, \"M\") === format(currentDate, \"M\");\n              const isToday = isSameDay(day, today);\n              const allTodosCompleted = isAllTodosCompleted(day); // 모든 할 일이 완료된 날\n              const todosExist = hasTodos(day); // 할 일이 존재하는 날\n\n              return (\n                <div\n                  key={j}\n                  style={{\n                    flex: 0.1,\n                    textAlign: \"center\",\n                    padding: \"10px\",\n                    cursor: \"pointer\",\n                    backgroundColor: allTodosCompleted ? '#39d353' : isToday ? 'pink' : '', // 할 일을 모두 마친 날짜의 배경색과 오늘 날짜의 배경색 설정\n                    border: todosExist ? '0.5px solid #000' : 'none', // 할 일이 있는 날짜에만 테두리 추가\n                    color: isCurrentMonth ? \"black\" : \"#ddd\",  // 현재 월에 속하지 않는 날짜는 회색으로 표시\n                  }}\n                  onClick={() => handleDateClick(day)}\n                >\n                  {format(day, \"d\")}  {/* 날짜 숫자 표시 */}\n                </div>\n              );\n            })}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default CustomCalendar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}