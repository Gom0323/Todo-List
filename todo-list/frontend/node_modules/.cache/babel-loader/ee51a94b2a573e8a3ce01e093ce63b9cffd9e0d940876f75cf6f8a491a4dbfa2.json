{"ast":null,"code":"var _jsxFileName = \"/Users/leeseungjun/Desktop/Todo-List/todo-list/frontend/src/components/CustomCalendar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { startOfMonth,\n// 해당 월의 첫째 날을 반환\nendOfMonth,\n// 해당 월의 마지막 날을 반환\nstartOfWeek,\n// 해당 주의 첫째 날을 반환\naddDays,\n// 날짜에 일수를 더함\nformat,\n// 날짜를 특정 형식의 문자열로 포맷\nisSameDay // 두 날짜가 같은 날인지 비교\n} from \"date-fns\";\n\n// 해당 연도와 월에 대한 달력을 생성\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction generateCalendar(year, month) {\n  const firstDayOfMonth = startOfMonth(new Date(year, month)); // 해당 월의 첫째 날\n  const lastDayOfMonth = endOfMonth(firstDayOfMonth); // 해당 월의 마지막 날\n  const firstDayOfWeek = startOfWeek(firstDayOfMonth); // 해당 주의 첫째 날\n\n  const daysInCalendar = []; // 달력에 표시될 날짜들을 담을 배열\n  let currentDay = firstDayOfWeek; // 달력에 표시될 날짜의 시작점을 설정\n\n  // 달력 배열을 채우기 위한 반복문\n  while (currentDay <= lastDayOfMonth || daysInCalendar.length < 6) {\n    const week = []; // 한 주의 날짜들을 담을 배열\n    for (let i = 0; i < 7; i++) {\n      week.push(currentDay); // 한 주의 날짜를 추가\n      currentDay = addDays(currentDay, 1); // 하루씩 더하여 다음 날짜로 이동\n    }\n    daysInCalendar.push(week); // 한 주를 달력 배열에 추가\n  }\n  return daysInCalendar; // 생성된 달력 배열을 반환\n}\n\n// CustomCalendar 컴포넌트, 달력을 표시하고 날짜 선택 기능\n// todos를 빈 배열로 설정하여 props가 전달되지 않거나 undefined일 경우에도 62번 줄의 filter에서 에러가 발생하는 것을 방지\nfunction CustomCalendar({\n  todos = [],\n  onDateSelect\n}) {\n  _s();\n  const [currentDate, setCurrentDate] = useState(new Date()); // 현재 선택된 날짜를 상태로 관리\n  const today = new Date();\n  const year = currentDate.getFullYear(); // 현재 선택된 날짜의 연도\n  const month = currentDate.getMonth(); // 현재 선택된 날짜의 월\n\n  const daysInCalendar = generateCalendar(year, month); // 현재 연도와 월에 대한 달력 생성\n\n  // 이전 달로 이동\n  const handlePrevMonth = () => {\n    setCurrentDate(new Date(year, month - 1, 1));\n  };\n\n  // 다음 달로 이동\n  const handleNextMonth = () => {\n    setCurrentDate(new Date(year, month + 1, 1));\n  };\n\n  // 특정 날짜가 클릭되었을 때 호출\n  const handleDateClick = date => {\n    onDateSelect(date); // 선택된 날짜를 부모 컴포넌트로 전달\n  };\n\n  // 특정 날짜의 모든 할 일이 완료되었는지 확인\n  const isAllTodosCompleted = date => {\n    const formattedDate = format(date, 'yyyy-MM-dd'); // 날짜를 'yyyy-MM-dd' 형식으로 포맷\n    const todosForDate = todos.filter(todo => todo.created_at === formattedDate); // 해당 날짜의 할 일 필터링\n    return todosForDate.length > 0 && todosForDate.every(todo => todo.completed); // 모든 할 일이 완료되었는지 확인\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"month\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePrevMonth,\n        children: \"\\uC774\\uC804\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: format(currentDate, \"yyyy년 M월\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextMonth,\n        children: \"\\uB2E4\\uC74C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"day\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          paddingTop: \"30px\"\n        },\n        children: [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"].map((dayName, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            flex: 0.1,\n            textAlign: \"center\",\n            padding: \"10px\",\n            color: dayName === \"일\" ? \"red\" // 일요일은 빨간색\n            : dayName === \"토\" ? \"blue\" // 토요일은 파란색\n            : \"black\" // 평일은 검은색\n          },\n          children: dayName\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), daysInCalendar.map((week, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\"\n        },\n        children: week.map((day, j) => {\n          const isCurrentMonth = format(day, \"M\") === format(currentDate, \"M\"); // 해당 날짜가 현재 월에 속하는지 확인\n          const isToday = isSameDay(day, today); // 해당 날짜가 오늘인지 확인\n          const allTodosCompleted = isAllTodosCompleted(day); // 해당 날짜의 할 일이 모두 완료되었는지 확인\n\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              flex: 0.1,\n              textAlign: \"center\",\n              padding: \"10px\",\n              cursor: \"pointer\",\n              backgroundColor: allTodosCompleted ? 'green' : isToday ? 'lightblue' : '',\n              // 할 일이 모두 완료되었으면 초록색, 오늘이면 연한 파란색 배경 설정\n              color: isCurrentMonth ? \"black\" : \"#ddd\" // 현재 월에 속하지 않는 날짜는 회색으로 표시\n            },\n            onClick: () => handleDateClick(day) // 날짜 클릭 시 처리 함수 호출\n            ,\n            children: [format(day, \"d\"), \"  \"]\n          }, j, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }, this);\n        })\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(CustomCalendar, \"jlRD8Xn8VFdQnzpYmYXrLX8M9Sw=\");\n_c = CustomCalendar;\nexport default CustomCalendar;\nvar _c;\n$RefreshReg$(_c, \"CustomCalendar\");","map":{"version":3,"names":["React","useState","startOfMonth","endOfMonth","startOfWeek","addDays","format","isSameDay","jsxDEV","_jsxDEV","generateCalendar","year","month","firstDayOfMonth","Date","lastDayOfMonth","firstDayOfWeek","daysInCalendar","currentDay","length","week","i","push","CustomCalendar","todos","onDateSelect","_s","currentDate","setCurrentDate","today","getFullYear","getMonth","handlePrevMonth","handleNextMonth","handleDateClick","date","isAllTodosCompleted","formattedDate","todosForDate","filter","todo","created_at","every","completed","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","display","justifyContent","paddingTop","map","dayName","index","flex","textAlign","padding","color","day","j","isCurrentMonth","isToday","allTodosCompleted","cursor","backgroundColor","_c","$RefreshReg$"],"sources":["/Users/leeseungjun/Desktop/Todo-List/todo-list/frontend/src/components/CustomCalendar.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport {\n  startOfMonth,  // 해당 월의 첫째 날을 반환\n  endOfMonth,    // 해당 월의 마지막 날을 반환\n  startOfWeek,   // 해당 주의 첫째 날을 반환\n  addDays,       // 날짜에 일수를 더함\n  format,        // 날짜를 특정 형식의 문자열로 포맷\n  isSameDay,     // 두 날짜가 같은 날인지 비교\n} from \"date-fns\";\n\n// 해당 연도와 월에 대한 달력을 생성\nfunction generateCalendar(year, month) {\n  const firstDayOfMonth = startOfMonth(new Date(year, month)); // 해당 월의 첫째 날\n  const lastDayOfMonth = endOfMonth(firstDayOfMonth);          // 해당 월의 마지막 날\n  const firstDayOfWeek = startOfWeek(firstDayOfMonth);         // 해당 주의 첫째 날\n\n  const daysInCalendar = [];  // 달력에 표시될 날짜들을 담을 배열\n  let currentDay = firstDayOfWeek;  // 달력에 표시될 날짜의 시작점을 설정\n\n  // 달력 배열을 채우기 위한 반복문\n  while (currentDay <= lastDayOfMonth || daysInCalendar.length < 6) {\n    const week = [];  // 한 주의 날짜들을 담을 배열\n    for (let i = 0; i < 7; i++) {\n      week.push(currentDay);  // 한 주의 날짜를 추가\n      currentDay = addDays(currentDay, 1);  // 하루씩 더하여 다음 날짜로 이동\n    }\n    daysInCalendar.push(week);  // 한 주를 달력 배열에 추가\n  }\n\n  return daysInCalendar;  // 생성된 달력 배열을 반환\n}\n\n// CustomCalendar 컴포넌트, 달력을 표시하고 날짜 선택 기능\n// todos를 빈 배열로 설정하여 props가 전달되지 않거나 undefined일 경우에도 62번 줄의 filter에서 에러가 발생하는 것을 방지\nfunction CustomCalendar({ todos = [], onDateSelect }) {\n  const [currentDate, setCurrentDate] = useState(new Date());  // 현재 선택된 날짜를 상태로 관리\n  const today = new Date();\n\n  const year = currentDate.getFullYear();  // 현재 선택된 날짜의 연도\n  const month = currentDate.getMonth();    // 현재 선택된 날짜의 월\n\n  const daysInCalendar = generateCalendar(year, month);  // 현재 연도와 월에 대한 달력 생성\n\n  // 이전 달로 이동\n  const handlePrevMonth = () => {\n    setCurrentDate(new Date(year, month - 1, 1));\n  };\n\n  // 다음 달로 이동\n  const handleNextMonth = () => {\n    setCurrentDate(new Date(year, month + 1, 1));\n  };\n\n  // 특정 날짜가 클릭되었을 때 호출\n  const handleDateClick = (date) => {\n    onDateSelect(date);  // 선택된 날짜를 부모 컴포넌트로 전달\n  };\n\n  // 특정 날짜의 모든 할 일이 완료되었는지 확인\n  const isAllTodosCompleted = (date) => {\n    const formattedDate = format(date, 'yyyy-MM-dd');  // 날짜를 'yyyy-MM-dd' 형식으로 포맷\n    const todosForDate = todos.filter(todo => todo.created_at === formattedDate);  // 해당 날짜의 할 일 필터링\n    return todosForDate.length > 0 && todosForDate.every(todo => todo.completed);  // 모든 할 일이 완료되었는지 확인\n  };\n\n  return (\n    <div className=\"calendar\">\n      <div className=\"month\">\n        <button onClick={handlePrevMonth}>이전</button>\n        <span>{format(currentDate, \"yyyy년 M월\")}</span>\n        <button onClick={handleNextMonth}>다음</button>\n      </div>\n      <div className=\"day\">\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            paddingTop: \"30px\",\n          }}\n        >\n          {[\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"].map((dayName, index) => (\n            <div\n              key={index}\n              style={{\n                flex: 0.1,\n                textAlign: \"center\",\n                padding: \"10px\",\n                color:\n                  dayName === \"일\"\n                    ? \"red\"  // 일요일은 빨간색\n                    : dayName === \"토\"\n                    ? \"blue\" // 토요일은 파란색\n                    : \"black\", // 평일은 검은색\n              }}\n            >\n              {dayName}\n            </div>\n          ))}\n        </div>\n        {daysInCalendar.map((week, i) => (\n          <div key={i} style={{ display: \"flex\", justifyContent: \"center\" }}>\n            {week.map((day, j) => {\n              const isCurrentMonth =\n                format(day, \"M\") === format(currentDate, \"M\");  // 해당 날짜가 현재 월에 속하는지 확인\n              const isToday = isSameDay(day, today);  // 해당 날짜가 오늘인지 확인\n              const allTodosCompleted = isAllTodosCompleted(day);  // 해당 날짜의 할 일이 모두 완료되었는지 확인\n\n              return (\n                <div\n                  key={j}\n                  style={{\n                    flex: 0.1,\n                    textAlign: \"center\",\n                    padding: \"10px\",\n                    cursor: \"pointer\",\n                    backgroundColor: allTodosCompleted ? 'green' : isToday ? 'lightblue' : '',  // 할 일이 모두 완료되었으면 초록색, 오늘이면 연한 파란색 배경 설정\n                    color: isCurrentMonth ? \"black\" : \"#ddd\",  // 현재 월에 속하지 않는 날짜는 회색으로 표시\n                  }}\n                  onClick={() => handleDateClick(day)}  // 날짜 클릭 시 처리 함수 호출\n                >\n                  {format(day, \"d\")}  {/* 날짜 숫자 표시 */}\n                </div>\n              );\n            })}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default CustomCalendar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}